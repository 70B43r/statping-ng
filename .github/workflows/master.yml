name: Master Build
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'

jobs:

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - uses: actions/setup-node@v1
        with:
          node-version: 12.18.2

      - name: Set Version
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Install Global Dependencies
        run: npm install -g yarn sass cross-env

      - name: Download Frontend Dependencies
        working-directory: ./frontend
        run: yarn

      - name: Download Go mods
        run: |
          go mod download
          go mod verify
          make test-deps

      - name: Build Frontend Statping
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        run: make clean compile

      - name: Upload Compiled Frontend (rice-box.go)
        uses: actions/upload-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Configure AWS credentials for Asset uploads
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Upload Static Assets to S3
        run: |
          tar -czvf source.tar.gz source/
          aws s3 cp source.tar.gz s3://assets.statping.com/commit/${{ github.sha }}/
          rm -rf source.tar.gz

  build:
    needs: frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux]
        arch: [386, amd64, arm-7, arm-6, arm64]
        include:
          - platform: darwin
            arch: amd64
          - platform: windows
            arch: amd64

    steps:
      - uses: actions/checkout@v2

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Configure AWS credentials for Asset uploads
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Add GOBIN to PATH
        run: |
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Set Linux Build Flags
        if: matrix.platform != 'darwin'
        run: echo ::set-env name=BUILD_FLAGS::'-extldflags -static'
        shell: bash

      - name: Build ${{ matrix.platform }}/${{ matrix.arch }}
        uses: crazy-max/ghaction-xgo@v1
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        with:
          xgo_version: latest
          go_version: 1.15.x
          dest: build
          prefix: statping
          targets: ${{ matrix.platform }}/${{ matrix.arch }}
          v: false
          x: false
          pkg: cmd
          buildmode: pie
          ldflags: -s -w -X main.VERSION=${{ env.VERSION }} -X main.COMMIT=${{ env.COMMIT }} ${{ env.BUILD_FLAGS }}

      - name: Compress Linux Builds
        if: matrix.platform == 'linux'
        run: |
          cd build
          mv statping-linux-${{ matrix.arch }} statping
          chmod +x statping
          tar -czvf statping-linux-${{ matrix.arch }}.tar.gz statping
          rm -rf statping
          echo ::set-env name=compressed::statping-linux-${{ matrix.arch }}.tar.gz

      - name: Compress Windows Builds
        if: matrix.platform == 'windows'
        run: |
          cd build
          mv statping-windows-4.0-${{ matrix.arch }}.exe statping.exe
          chmod +x statping.exe
          zip statping-windows-${{ matrix.arch }}.zip statping.exe
          rm -rf statping.exe
          echo ::set-env name=compressed::statping-windows-${{ matrix.arch }}.zip

      - name: Compress Darwin Builds
        if: matrix.platform == 'darwin'
        run: |
          cd build
          mv statping-darwin-10.6-${{ matrix.arch }} statping
          chmod +x statping
          tar -czvf statping-darwin-${{ matrix.arch }}.tar.gz statping
          rm -rf statping
          echo ::set-env name=compressed::statping-darwin-${{ matrix.arch }}.tar.gz

      - name: Upload Compiled Statping Binary
        uses: actions/upload-artifact@v1
        with:
          name: statping-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./build

      - name: Upload Releases
        id: upload-assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        with:
          tag_name: dev-v${{ env.VERSION }}
          draft: true
          prerelease: true
          files: build/${{ env.compressed }}

      - name: Upload Compiled Binaries to S3
        run: |
          aws s3 cp build/${{ env.compressed }} s3://assets.statping.com/commit/${{ github.sha }}/

  test:
    needs: frontend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: statping
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password123
          MYSQL_DATABASE: statping
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - uses: actions/setup-node@v1
        with:
          node-version: 12.18.2

      - name: Install Global Dependencies
        run: npm install -g yarn sass newman cross-env wait-on @sentry/cli

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Install Statping
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        run: |
          make build certs
          chmod +x statping
          mv statping $(go env GOPATH)/bin/

      - name: Go Tests
        run: |
          go get gotest.tools/gotestsum
          gotestsum --no-summary=skipped --format dots -- -covermode=count -coverprofile=coverage.out -p=1 ./...
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
          DB_CONN: sqlite3
          STATPING_DIR: ${{ github.workspace }}
          API_SECRET: demopassword123
          DISABLE_LOGS: false
          ALLOW_REPORTS: true
          COVERALLS: ${{ secrets.COVERALLS }}
          DISCORD_URL: ${{ secrets.DISCORD_URL }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_OUTGOING: ${{ secrets.EMAIL_OUTGOING }}
          EMAIL_SEND_TO: ${{ secrets.EMAIL_SEND_TO }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          MOBILE_ID: ${{ secrets.MOBILE_ID }}
          MOBILE_NUMBER: ${{ secrets.MOBILE_NUMBER }}
          PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_TOKEN }}
          PUSHOVER_API: ${{ secrets.PUSHOVER_API }}
          SLACK_URL: ${{ secrets.SLACK_URL }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
          TWILIO_SID: ${{ secrets.TWILIO_SID }}
          TWILIO_SECRET: ${{ secrets.TWILIO_SECRET }}
          TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
          TWILIO_TO: ${{ secrets.TWILIO_TO }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          GOTIFY_URL: ${{ secrets.GOTIFY_URL }}
          GOTIFY_TOKEN: ${{ secrets.GOTIFY_TOKEN }}

      - name: Coveralls Testing Coverage
        run: |
          go get github.com/mattn/goveralls
          goveralls -coverprofile=coverage.out -repotoken $COVERALLS
        env:
          COVERALLS: ${{ secrets.COVERALLS }}


  test-postman:
    needs: [frontend, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [postman_env_sqlite.json, postman_env_postgres.json, postman_env_mysql.json]
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: statping
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password123
          MYSQL_DATABASE: statping
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2

      - name: Download Statping
        uses: actions/download-artifact@v1
        with:
          name: statping-linux-amd64
          path: ./build

      - name: Install Statping
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        run: |
          cd build && tar -xvf statping-linux-amd64.tar.gz
          mv statping ../

      - name: Run Statping
        run: |
          API_SECRET=demosecret123 ./statping --port=8585 > /dev/null &
          sleep 5

      - name: Postman Tests
        uses: matt-ball/newman-action@master
        with:
          apiKey: ${{ secrets.POSTMAN_API }}
          collection: ./dev/postman.json
          environment: ./dev/${{ matrix.platform }}
          timeoutRequest: 30000
          delayRequest: 600

  sentry-release:
    needs: [test, test-postman]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setup Sentry CLI
        uses: mathrix-education/setup-sentry-cli@master
        with:
          version: latest
          url: ${{ secrets.SENTRY_URL }}
          token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          organization: statping

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Sentry Release
        run: make sentry-release

  homebrew-release:
    needs: [frontend, build, test, test-postman]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Update Homebrew Package
        env:
          VERSION: ${{ env.VERSION }}
          TRAVIS_API: ${{ secrets.TRAVIS_API }}
        run: make publish-homebrew

  slack-update:
    needs: [frontend, build, test, test-postman]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
          SLACK_CHANNEL: dev
          SLACK_USERNAME: StatpingDev
